Go Notes:

play.golang.org
golang.org -- tour of Go, effective Go
   packages, goplus plugin
Atom text editor

package main

import (
  "fmt"
  "strings"
)

const (
  message = "Hello"
  first = iota  // constants auto increment 0,1,2
  second
  third
  
  first = 1 << (10 * iota)
  second
  third
)

var (
  msgvar = "Hello var"
  x int = 10
  lName := "last name"
  
  myComplex := complex(2, 3)
)

func main() {
   println(msgvar)
   
   // arrays 
   myArray := [3] int {10, 20, 30}
   myArray := [...] int {10, 20, 30}
   myArray[0] = 10
   len(myArray)
   fmt.Println(myArray)
   
   // slice subset of arrays resize on the fly
   mySlice := myArray[:]
   mySlice := append(mySlice, 100)
   mySlice := []int {1, 2, 3}
   mySlice := make([]int, 100) // 100 size of size
   
   // maps
   myMap := make(map[int]string)
   myMap[12] = "Bar"
   
   inc := 1
   inc++  // add 1
   inc--  // minus 1
   
   inc += 5  // add 5
   
   // branches and loop
   if foo == 1 {
      ....
   } else {
   
   }
   // initalize foo prior to if
   if foo :=2; foo == 1 {
   }
   
   switch foo {
   case foo == 1:
      ...
   case  foo > 2:
      ...
   }
   
   for i:=0; i < 5; i++ {
   }
   
   i := 0
   for {
      i++
	  if i > 5 {
	     break
	  }
   }
   s := []string{"foo", "bar", "buz"}
   for idx, v := range s {
      // idx = 0, 1, 2
	  // v = foo, bar, buz
   }
   
   & -> memory address
}

func init() {
  // after var, const but before main
}


// functions
-- passing by value
-- passing by reference
-- variadic functions

// by value
func sayHello(message string) {
  println(message)
}
// by reference
sayHello(&message) // message ptr

func sayHello(message *string) {
   println(*message) // dereferencing ptr
}

sayHello("a", "b", "c", "d", "e")
func sayHello(messages ...string) {
   for _, message := range messages 
      println(message)
}

// return values 
-- single
-- multiple
-- named return value

result := add(1, 2, 3, 4, 5)
func add(terms ...int) int {
  result := 0
  for _, term := range terms
     result += term
}

// multiple return
func add(terms ..int) (int, int) {
  result := 0
  for _, term := range terms
     result += term
  return len(terms), result
}

// named return value
func add(terms ..int) (numTerms int, sum int) {
  result := 0
  for _, term := range terms
     sum += term
  numTerms := len(terms)
  return
}

// anonymous functions
addFunc := func (terms ..int) (numTerms int, sum int) {
  result := 0
  for _, term := range terms
     sum += term
  numTerms := len(terms)
  return
}

// Object Oriented Programming
-- Structs and Fields

// local memory stack
foo := myStruct{} or myStruct{"first"}

// heap -- large memory size - reference type
foo := new(myStruct) or &myStruct("bar")
foo.fName = "bar"

foo.fName = "first"

type myStruct struct {
  fName string
  myMap map[string]string
}

// Constructor Functions
func newMyStruct() *myStruct {
   result := myStruct {}
   result.myMap = map[string]string{}
   return &result
}

mp := messagePrinter("foo")
mp.printMessage()

func (mp *messagePrint) printMessage() {
   println(mp.message)
}

emp := enhancedMessagePrinter{messagePrinter{"foo"}}
emp.printMessage()

type enhancedMessagePrinter struct {
    messagePrinter
}

// go has no enum use type with constants, composition
type PlantType string

type PowerPlant struct {
   plantType PlantType
   status PlantStatus
}

multiple lines use ,

strings.repeat("-", len(label))

// concurrency
Goroutines
channels -- sharing data between threads

-- Goroutines
import "time"
import "runtime"

runtime.GOMAXPROCS(8)
go abcGen()
time.sleep(100 * time.Millisecond)
println("this comes first!")

func abcGen() {
   for l := byte('a'); l <= byte('z'); l++ {
      go println(string(l))
   }
}

-- Channels
-- sending and receiving messages
-- Ranging over channels
ch := make(chan string)
go abcGen(ch)
go printer(ch)
<-doneCh

func abcGen(ch chan string) {
for l := byte('a'); l <= byte('z'); l++ {
      ch <- string(l)
   }
   
}

func printer(ch chan strng) {
  for {
    println(<-ch)
  }
}

----------------------------
- Creating web application
----------------------------
templates
mvc framework
database access
unit testing
session management
only core, minimum 3rd party libraries
gocode
goclipse
go get -u github.com/nsf/gocode

server:
net/http
http.ListenAndServe
http.Handle
http.HandleFunc

import (
  "net/http"
  "io/ioutil"
  "strings"
)

func main() {
  http.Handler("/", new(MyHandler))

  http.ListenAndServe(":8080", nil)
  }
}

type MyHandler struct {
  http.Handler
}
func (this *MyHandler) ServeHTTP(w http.ResponseWriter, req *http.Request) {
  path := "public/" + req.URL.Path
  data, err := ioutil.ReadFile(string(path))

  if err == nil {
    var contentType string
	if (strings.HasSuffix(path, ".css") {
	} else if string.HasSuffix(path, ".html") {
	  contentType = "text/html"
	} else if strings.HasSuffix(path, ".js") {
      contentType = "application/javascript"
	} else if strings.HasSuffix(path, ".png") {
	   contentType = "image/png"
	} else {
	  contentType = "text/plain"00
	}
	w.Header().Add("Content Type", contentType)
    w.Write(data)
  }
  else {
    w.WriteHeader(404)
	w.WriteHeader([]byte("404 - " + http.StatusText(404)))
  }
}


